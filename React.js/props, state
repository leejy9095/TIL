props 는 부모 컴포넌트가 자식 컴포넌트에게 주는 값입니다
자식 컴포넌트에서는 props 를 받아오기만하고 받아온 props 를 직접 수정 할 수 는 없습니다(정적)

state 는 컴포넌트 내부에서 선언하며 내부에서 값을 변경 할 수 있습니다(동적)

props사용법 
this 키워드를 이용한다

test component 작성
class TestComponent extends Component {
  render() {
    return (
      <div>
        <b>{this.props.name}</b> 입니다.
      </div>
    );
  }
}


상위 component에서 아래처럼 작성하고  TestComponent를 import후 실행하면
return (
  <TestComponent name="레엑트" />
)

결과:리엑트 입니다.
props 값은 name="리엑트" 가된다

defaultProps를 셋팅 할 수 있습니다
class 안에
static defaultProps = {
  name: '기본이름'
}

class 밖에
MyName.defaultProps = {
  name: '기본이름'
};

단순히 props만 받아와서 보여주는 컴포넌트는 간단하게 함수형 컴포넌트 작성 할 수 있습니다
import React from 'react';

const TestComponent = ({ name }) => {
  return (
    <div>
      {name} 입니다.
    </div>
  );
};

export default MyName;

함수형 컴포넌트와 클래스형 컴포넌트의 주요 차이점은 state 와 LifeCycle 이 빠져있다는 점이다

state 사용법
컴포넌트의 state 를 정의할 때는 class fields 문법을 사용해서 정의합니다.
class TestComponent extends Component {
  state = { //state 정의
    number: 0
  }
  
  testSetFunc() { //함수 생성
    this.setState({ //state를 변경하기위해서는 this.setState를 무조건 거쳐야한다
      number: this.state.number + 1
    });
    //위에 this.setState를 아래처럼도 써줄수있다 this.state가 한번더 호출되는것을 막아준다
    this.setState(
     (state) => ({
        number: state.number
     });
    //이런식으로도 할수있다
    const { number } = this.state;
    this.setState({
      number: number + 1
    })
  );
  
   render() {
    return (
      <div>
        <div>값: {this.state.number}</div>        
        <button onClick={this.testSetFunc}>+</button>   //onclick에 
      </div>
    );
  }
}

리액트에서는 setState 함수가 호출되면 컴포넌트가 리렌더링 되도록 설계되어있습니다.
setState는 객체로 전달되는 값만 업데이트를 해줍니다.
 리액트에서 이벤트 함수를 설정할때 html 과 다음과 같은 사항이 다릅니다.

onClick의 이벤트이름을 설정 할 때 camelCase 로 설정해주어야 된다
onclick 은 onClick 등등
이벤트에 전달해주는 값은 함수 여야 한다


