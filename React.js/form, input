import React, { Component } from 'react';

class Form extends Component {
  state = {
    name: '',
    phone: ''
  }
  handleChange = (e) => {
    this.setState({
      name: e.target.value  //이렇게 한개씩 지정해줘도되지만 input의 name속성을 이용해서 아래처럼 한번에 작성가능(input 여러개일경우)
      [e.target.name]: e.target.value
    });
  }
  handleSubmit = (e) => {
    e.preventDefault(); // 페이지 리로딩 방지, 원래는 submit이 발생하면 이 페이지를 다시 호출
    // 상태값을 onCreate 를 통하여 부모에게 전달
    this.props.onCreate(this.state);
    // 상태 초기화
    this.setState({
      name: '',
      phone: ''
    })
  }
  render() {
    return (
      <form>
        <input
          placeholder="이름"
          value={this.state.name}
          onChange={this.handleChange}
          name="name"
        />
        <input
          placeholder="전화번호"
          value={this.state.phone}
          onChange={this.handleChange}  //onChange 이벤트가 발생하면, e.target.value 값을 통하여 이벤트 객체에 담겨있는 현재의 값을 읽어올 수 있다
          name="phone"
        />
        <button type="submit">등록</button>
        <div>{this.state.name} {this.state.phone}</div>
      </form>
    );
  }
}

export default Form;
//위 소스가 동작하면 input값 변경시 state 값을 변경시켜 div안에 새로운 값을 표시


//state 안에있는 값을 부모 컴포넌트로 전달할경우 부모컴포넌트에서 메소드를 만들고 만든 메소드를 자식에게 전달해서 자식내부에서 호출하는 방식 사용
import React, { Component } from 'react';
import Form from './components/Form';

class App extends Component {
  handleCreate = (data) => {  //부모 컴포넌트에서 handleCreate라는 메소드 생성
    console.log(data);
  }
  render() {
    return (
      <div>
        <PhoneForm
          onCreate={this.handleCreate}  //자식 컴포넌트에서 부모 컴포넌트의 handleCreate 메소드 호출
        />
      </div>
    );
  }
}

export default App;

