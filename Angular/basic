앵귤러 버전1은 소위 말하는 Jquery처럼 라이브러리를 등록해서 사용하는 방식 이였다면, 
앵귤러 버전2 부터는 타입스크립트를 활용하여 개발한 뒤에 컴파일 하여 주는 방식으로 변경이 되었습니다.

타입스크립트는 자바스크립트를 조금 더 엄격하게, 규칙있게 사용하기 위해서 만들어진 언어입니다.
앵귤러는 "타입스크립트 기반으로 앵귤러의 문법대로 개발하는 언어" 라고 생각하시면 될 것 같습니다

예전의 HTML에서의 개발방식은 Javascript, Jquery를 사용하여 소위 돔(Dom) 이라는 객체를 직접 제어하고 데이터를 가져와서 서버로 전달해 주는 방식이였습니다.
보안이슈나 웹기술의 발정으로 인해 프론트 코드가 늘어남으로 인해서 프론트 코드의 보안과 복잡하게 얽혀있는 코드를 개선해보고자 만들어진 프레임워크가 바로 앵귤러 입니다.

앵귤러는 순수 100% 클라이언트 코드입니다. 
여기서 클라이언트 코드란, 웹 브라우저에서만 동작하는 코드를 말합니다.
그러므로 데이터베이스 연동, 다른서버와의 직접 연동 등 이러한 행위는 직접 할 수가 없습니다.
앵귤러 개발자는 소위 ajax형식으로 서버 개발자에게 데이터 CRUD와 관련된 내용을 전달하고, 그에 따른 결과를 화면에 나타내는 작업만 합니다.
백그라운드 요청을 담당하는 개발자는 자신의 서버언어(Node, php, Java, 파이썬 등)를 활용해서 앵귤러에서 요청한 데이터를 처리하는 작업만 합니다.
앵귤러코드, 백단 코드 합친게 최종 프로젝트 코드가 된다
기능과 역할의 분리가 앵귤러의 최대 관심사라고 생각한다

모듈이란, 각종 설정과 관련된 내용이 존재하는 파일입니다.
컴포넌트는 모듈이 만들어준 환경에서 동작하여 실제 화면에 관한 내용을 직접적으로 수행하는 파일
컴포넌트는 class 파일에 @Component라는 꾸밈말(데코레이터)이 붙여진 파일을 의미합니다.

앵귤러 기반에서의 클래스의 접근제어 기본 값은 protected 이다.
앵귤러에서는 아무것도 명시하지 않으면 암묵적으로 protected로 지정되어 패키지 레벨로 공개됩니다.

export 명령어는 해당 클래스를 외부에서 사용 할 수 있도록 해 주는 기능

앵귤러에서의 표현식은 내부 컴포넌트의 데이터가 변하면 자동으로 변하게 됩니다. 이게 양방향 데이터 바인딩이라고 한다

모듈은 여러개의 컴포넌트를 가질 수 있습니다. 이러한 컴포넌트를 관리해 주는 것을 모듈이라고 합니다.
모듈에서는 다른 여러 기능들을 사용하기 위한 설정의 역할을 한다는 것 입니다.
소위 "라이브러리"라고 불리우는 앵귤러의 대부분의 기능은 이렇게 모듈화가 되어 있습니다.

ng generate를 사용하면 컴포넌트가 자동으로 @NgModule 안의 declarations 부분에 추가 된다
만들어진 컴포넌트는 반드시 모듈에 선언(declarations) 해 주어야 한다
모듈의 bootstrap 부분은 가장 먼저 동작할 컴포넌트가 오게된다

main.ts파일은 앵귤러 프로젝트가 실행 될 때 가장먼저 동작하는 곳 입니다.
bootstrapModule의 함수 의미는 앵귤러 프로젝트가 동작 할 때 가장먼저 사용할 모듈이 무엇인지 써 주는 곳 입니다.




//명령어
ng serve로 프로젝트 start
ng build로 빌드해서 백단에서 사용가능한 코드가된다
명령어 실행시 dist 디렉토리가 만들어지면서 그 폴더가 백단 사용코드

ng generate component 컴포넌트명 으로 컴포넌트 생성
= ng g component 컴포넌트명
